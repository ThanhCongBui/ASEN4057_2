#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
//ADDED PART TO CODE FOR PARALLEL //
#include <mpi.h>
//STRUCTS
struct dydt_type{
    double xs_dot;
    double ys_dot;
    double xm_dot;
    double ym_dot;
    double vxs_dot;
    double vys_dot;
    double vxm_dot;
    double vym_dot;
  };
struct dydt_type dydt;
struct y_type{
  double xs; //= y0[0];
  double ys; //= y0[1];
  double xm; //= y0[2];
  double ym; //= y0[3];
  double vxs; //= y0[4];
  double vys; //= y0[5];
  double vxm; //= y0[6];
  double vym; //= y0[7];
};
struct y_type y;
struct y_type ytemp;

//FUNCTION PROTOTYPES
double *forces(double RAx, double RAy, double RBx, double RBy, double mA, double mB);
struct dydt_type dydtfun(struct dydt_type dydt, struct y_type y, double * masses);
int integrator(double *y0, FILE * outfile, double clearance, int cond);
double *delVmin_opt(double *y0, struct y_type y,double clearance,double accuracy, FILE * outfile1, double rE);
double *delVtime_opt(double *y0, struct y_type y,double clearance,double accuracy, FILE * outfile2, double rE);
char * myrename(char *name);

//---------------------------------MAIN--------------------------------------------
int main(int argc, char *argv[]){
  //Take out arguments
  int cond = 1; //We want integrator to write data to a file
  int objective = atoi(argv[1]);
  double clearance = atof(argv[2]);
  double accuracy = atof(argv[3]);
  double rE = 6371000;
  //Rename if theres a "." in argument
  char * name = malloc(sizeof(char)*strlen(argv[3]));
  sprintf(name, "%s", argv[3]);
  char * new = myrename(name);
  //Create output files
  FILE *outfile, *outfile1, *outfile2;
  char *file, *outfile_delvmin;
  file = malloc( ( 10 + strlen(argv[1]) + strlen(argv[2]) + strlen(argv[3]) ) * sizeof(char) );
  sprintf(file, "Optimum_%s_%s_%s", argv[1], argv[2],argv[3] );
  outfile = fopen(file, "w");
  //Create initial conditions
  double *y0 = malloc(sizeof(double)*8);
  y0[0] = 2.1855*pow(10,8);
  y0[1] = 2.6046*pow(10,8);
  y0[2] = 2.8341*pow(10,8);
  y0[3] = 2.597*pow(10,8);
  y0[4] = 642.7876;
  y0[5] = 766.0444;
  y0[6] = -683.7457;
  y0[7] = 746.1774;
  //Create struct vector, assign initial conditions
  y.xs = y0[0];
  y.ys = y0[1];
  y.xm = y0[2];
  y.ym = y0[3];
  y.vxs = y0[4];
  y.vys = y0[5];
  y.vxm = y0[6];
  y.vym = y0[7];
  double * delV_min;
  int er;

  // ADDED PART TO CODE FOR PARALLEL//
  int run, processID, numProcess;

  run = MPI_Init(&argc, &argv);

    // We'll need to add command line arguments that take care of the number of processes
  //Choose objective 
    if(objective == 1){
	    outfile1 = fopen("outfile1","w");
	    delV_min = delVmin_opt(y0, y,clearance,accuracy, outfile1, rE);
	    fclose(outfile1);
	    y0[4] += delV_min[0];
  	    y0[5] += delV_min[1];
            er = integrator(y0, outfile, clearance, 1);
	    free(delV_min);
    }
    else if(objective == 2){
	    outfile2 = fopen("outfile2","w");
	    delV_min = delVtime_opt(y0, y,clearance,accuracy, outfile2, rE);
	    fclose(outfile2);
	    y0[4] += delV_min[0];
  	    y0[5] += delV_min[1];
	    er = integrator(y0, outfile, clearance, 1);
	    free(delV_min);
    }
free(name);
free(file);
fclose(outfile);
free(y0);
return 0;
}
//---------------------------------END OF MAIN--------------------------------------------



//---------------------------------OPTIMIZATION(objective 1)---------------------------------------
double * delVmin_opt(double *y0, struct y_type y,double clearance,double accuracy, FILE * outfile1, double rE){
    int cond=0; //We dont want integrator to put anything in text file
    int er;
    double delVx,delVy,delV_mag,delVx_temp,delVy_temp;
    double delV_temp=100;
    double * yte = malloc(sizeof(double)*8);
    yte[0] = y0[0];
    yte[1] = y0[1];
    yte[2] = y0[2];
    yte[3] = y0[3];
    yte[6] = y0[6];
    yte[7] = y0[7];

    /*This is the section that I'm going to parallelize.
    My overall goal is to use two processes to work through the optimization code faster
    One easy way is probably to split the processes into positive and negative values,
    or perhaps by something else.

    Cannot access data in a UE without sending it as a message to "you"
    Sending messages to/from MPI processes takes communication time.

    Need MPI_INIT to start up and use MPI functionality. Probably should put this in the main
    file to avoid having it start up each single time that delV(etc) is called.

I'm putting that in the main file right now.



    */
    for (delVx=-100/sqrt(2);delVx<=100/sqrt(2);delVx+=accuracy){
        yte[4] = y0[4] + delVx;
        for (delVy=-100/sqrt(2);delVy<=100/sqrt(2);delVy+=accuracy){
            //alter initial conditions
            yte[5] = y0[5] + delVy;
            er = integrator(yte, outfile1, clearance, cond);// calculate trajectpory
            if(er == 2){ //discard if not returned to earth
                delV_mag = sqrt(pow(delVx,2) + pow(delVy,2)); //calculate magnitude of delta v
                if (delV_mag <= delV_temp){//if delta V is smaller than guess, set guess to the delta V
                    delV_temp = delV_mag;
                    delVx_temp = delVx;
		    delVy_temp = delVy;
                }
            }
        }
    }
    free(yte);
    fprintf(outfile1,"Minimum change in velocity to get to Earth is %.4f [m/s]\n", delV_temp);
    double *delV = malloc(sizeof(double)*2);
    delV[0] = delVx_temp;
    delV[1] = delVy_temp;
    return delV;
}
//---------------------------------OPTIMIZATION(objective 2)---------------------------------------
double * delVtime_opt(double *y0, struct y_type y,double clearance,double accuracy, FILE * outfile2, double rE){
    int cond=0; //We dont want integrator to put anything in text file
    int er;
    double delVx,delVy,delV_mag,delVx_temp,delVy_temp;
    double delV_temp=3000;
    double * yte = malloc(sizeof(double)*8);
    yte[0] = y0[0];
    yte[1] = y0[1];
    yte[2] = y0[2];
    yte[3] = y0[3];
    yte[6] = y0[6];
    yte[7] = y0[7];
    for (delVx=-100/sqrt(2);delVx<=100/sqrt(2);delVx+=accuracy){
        yte[4] = y0[4] + delVx;
        for (delVy=-100/sqrt(2);delVy<=100/sqrt(2);delVy+=accuracy){
            //alter initial conditions
            yte[5] = y0[5] + delVy;
            er = integrator(yte, outfile2, clearance, cond);// calculate trajectpory
            if(er == 2){ //discard if not returned to earth
                delV_mag = sqrt(pow(delVx,2) + pow(delVy,2)); //calculate magnitude of delta v
                if (delV_mag <= delV_temp){//if delta V is smaller than guess, set guess to the delta V
                    delV_temp = delV_mag;
                    delVx_temp = delVx;
		    delVy_temp = delVy;
                }
            }
        }
    }
    free(yte);
    fprintf(outfile2,"Change in velocity to get to Earth in fastest time is %.4f [m/s]\n", delV_temp);
    double *delV = malloc(sizeof(double)*2);
    delV[0] = delVx_temp;
    delV[1] = delVy_temp;    
    return delV;
}
